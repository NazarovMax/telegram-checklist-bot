from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from telegram.error import NetworkError
from dotenv import load_dotenv
import os
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
load_dotenv()

print("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω", flush=True)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv('BOT_TOKEN')
PORT = os.getenv("PORT", 10000)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not bot_token:
    print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!", flush=True)
else:
    print(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {bot_token}", flush=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
updater = Updater(bot_token, use_context=True)

data_file = 'data.json'

print("–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç polling...", flush=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_data():
    if os.path.exists(data_file):
        with open(data_file, 'r') as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_data(data):
    with open(data_file, 'w') as file:
        json.dump(data, file, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
data = load_data()

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    if user_id not in data:
        data[user_id] = {
            "name": update.message.from_user.first_name,
            "checklists": {}
        }
        save_data(data)
    menu_keyboard = [[
        KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç"),
        KeyboardButton("üìã –ú–æ–∏ —á–µ–∫-–ª–∏—Å—Ç—ã")
    ], [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç")], [KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç")]]
    reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {data[user_id]['name']}! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_checklists(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    checklists = data.get(user_id, {}).get('checklists', {})
    if checklists:
        keyboard = [[InlineKeyboardButton(name, callback_data=f'start_{name}')] for name in checklists]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í–æ—Ç —Ç–≤–æ–∏ —á–µ–∫-–ª–∏—Å—Ç—ã:", reply_markup=reply_markup)
    else:
        update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤. –ù–∞–∂–º–∏ \"üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç\", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.")

# –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
def delete_checklist(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    checklists = data.get(user_id, {}).get('checklists', {})
    
    if checklists:
        keyboard = [[InlineKeyboardButton(name, callback_data=f'delete_{name}')] for name in checklists]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í—ã–±–µ—Ä–∏ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    else:
        update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤. –ù–∞–∂–º–∏ \"üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç\", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.")


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
def edit_checklist(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    checklists = data.get(user_id, {}).get('checklists', {})
    
    if checklists:
        keyboard = [[InlineKeyboardButton(name, callback_data=f'edit_{name}')] for name in checklists]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í—ã–±–µ—Ä–∏ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    else:
        update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤. –ù–∞–∂–º–∏ \"üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç\", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.")


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞
def create_checklist(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    update.message.reply_text("–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —á–µ–∫-–ª–∏—Å—Ç?")
    context.user_data['creating_checklist'] = True


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    dp = updater.dispatcher

    # –£–¥–∞–ª–µ–Ω–∏–µ Webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    updater.bot.delete_webhook(drop_pending_updates=True)

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex("^üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç$"), create_checklist))
    dp.add_handler(MessageHandler(Filters.regex("^üìã –ú–æ–∏ —á–µ–∫-–ª–∏—Å—Ç—ã$"), show_checklists))
    dp.add_handler(MessageHandler(Filters.regex("^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç$"), edit_checklist))
    dp.add_handler(MessageHandler(Filters.regex("^üóë –£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç$"), delete_checklist))
    dp.add_handler(CallbackQueryHandler(button, pattern=r'start_.*|edit_.*|delete_.*'))
    dp.add_handler(CallbackQueryHandler(toggle_task, pattern=r'toggle_.*'))
    dp.add_handler(CallbackQueryHandler(finish_checklist, pattern=r'finish'))
    dp.add_handler(CallbackQueryHandler(edit_task, pattern=r'delete_.*|add_task|finish_edit'))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")
    try:
        updater.start_polling()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Telegram API.")
    except NetworkError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    print("Polling –∑–∞–≤–µ—Ä—à—ë–Ω.", flush=True)

    updater.idle()

if __name__ == '__main__':
    main()
